extends layout


mixin createImplementation(currentLanguage, languages, fileName=null)
  div(class="implementation" style="padding-top: 10px;")
    span(class="implementationFileExisting")
      if fileName
        h7.impltMsg Old file name: #{fileName} [Upload a new file if you want to replace it]
    div
      button.btn.btn-outline-success.defineNavBtn.removeImplt(class= 'remove')
        svg.bi.bi-trash(xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16')
          path(d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z')
          path(fill-rule='evenodd' d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z')
      if !fileName
        input(class="implementationFile" type="file" style="border: none; width: inherit; height: inherit")
        select(class="implementationLanguage")
          option() -
          each language in languages
            if language==currentLanguage
              option(value=language selected=true) #{language}
            else
              option(value=language) #{language}
      else
        input(class="implementationFile existing" type="file" style="border: none; width: inherit; height: inherit")
        select(class="implementationLanguage existing")
          option() -
          each language in languages
            if language==currentLanguage
              option(value=language selected=true) #{language}
            else
              option(value=language) #{language}

      

mixin createStep(position, name, doc, type, inputDoc, outputDoc, outputExtension, implementations)
  div(id="step" + position style="padding-top: 20px;")
    hr
    div(class="row description highlight")
      div(class="col highlight")
        h3 Input
        br
    div(class="row")
      div(class="col")
        +input("step" + position, "inputDoc", "Describe", inputDoc)
        br
        div(class="highlight arrow") &#8675;
    div(class="row")
      div(class="col highlight")
        h3 Step
        br
    div(class="row step")
      div(class="box col")
        div(style="text-align: center;")
          each concept in concepts
            if type==concept
              input(type="radio" value=concept id="step" + position + concept name="step" + position + "type" class="type input-hidden" checked)
            else
              input(type="radio" value=concept id="step" + position + concept name="step" + position + "type" class="type input-hidden")
            label.defineLabel(for="step" + position + concept, class=concept)
              +conceptIcon(concept)
        div
          +input("step" + position, "name", "Name", name)
        div
          +input("step" + position, "doc", "Describe", doc)
        if implementations && implementations[0]
          a.addImplementation(onclick="addImplementation('step" + position +"'); return false;")
              +plusButton()
          
          
          each implementation in implementations
              +createImplementation(implementation.language, languages, implementation.fileName)
        else
          a.addImplementation(onclick="addImplementation('step" + position +"'); return false;")
            +plusButton()
        
          +createImplementation("-", languages)
        
    div(class="row")
      div(class="col")
        div(class="highlight arrow") &#8675;
    div(class="row")
      div(class="col highlight")
        h3 Output
        br
    div(class="row")
      div(class="col")
        +input("step" + position, "outputDoc", "Describe", outputDoc)
        +input("step" + position, "outputExtension", "Extension", outputExtension)
    div(class="row stepRemove" style=(position==1?"display: none;":""))
      .container.centerContainer
        button.btn.btn-outline-success(onclick="logDeletedStep(this); return false;" style="margin: 0px;") Remove this step

block pageJS
  script(src="/phenoflow/javascripts/define.js")

block header
  span(class="authentication")
    | Define a new phenotype
  form(class="form-inline restricted")
    +input("", "workflowName", "Name", workflow&&workflow.name?workflow.name:"").defineNavInput
    +input("", "workflowAbout", "About", workflow&&workflow.about?workflow.about:"").defineNavInput
    button.btn.btn-outline-success.defineNavBtn(onclick="createOrUpdateWorkflow(); return false;"  style="margin: 10px;")
      | SAVE

block content
  br
  br
  container.centerContainer
    h5(class = "authentication") You have been logout, you will have to login again to use this functionality !
  span(class="restricted")
    container.centerContainer
      .custom-control.custom-switch
        input#advancedParamsSwitch.custom-control-input(type='checkbox'  data-toggle='collapse' href='#collapseHelp' role='button' aria-expanded='false' aria-controls='collapseExample')
        label.custom-control-label(for='advancedParamsSwitch') Display help section
    br
    br
    #collapseHelp.collapse
      #accordionExample.accordion
        .card
            #headingOne.card-header
              h2.mb-0
                button.btn.btn-link.btn-block.text-left(type='button' data-toggle='collapse' data-target='#collapse1' aria-expanded='false' aria-controls='collapseOne')
                  | How many steps are required to form a phenotype definition ?
            #collapse1.collapse(aria-labelledby='headingOne' data-parent='#accordionExample')
              .card-body
                  br
                  p A minimum of three steps is required to form a functional phenotype definition
        .card
            #headingTwo.card-header
              h2.mb-0
                button.btn.btn-link.btn-block.text-left(type='button' data-toggle='collapse' data-target='#collapse2' aria-expanded='false' aria-controls='collapseOne')
                  | What types of steps are required to form a functional phenotype definition
            #collapse2.collapse(aria-labelledby='headingTwo' data-parent='#accordionExample')
              .card-body
                  br
                  p The phenotype definition must start by "load"/"external" step, then it will be followed by "logic" or "boolean" steps. Finally, the last step must be of an output type. Failing in following this order will create deficient phenotype definitions.
        .card
            #headingThree.card-header
              h2.mb-0
                button.btn.btn-link.btn-block.text-left(type='button' data-toggle='collapse' data-target='#collapse3' aria-expanded='false' aria-controls='collapseOne')
                  | What types of extensions are supported by Phenoflow for step outputs ? 
            #collapse3.collapse(aria-labelledby='headingThree' data-parent='#accordionExample')
              .card-body
                  br
                  p Phenoflow only handles step outputs with "csv" extensions for the moment
        .card
            #headingFour.card-header
              h2.mb-0
                button.btn.btn-link.btn-block.text-left(type='button' data-toggle='collapse' data-target='#collapse4' aria-expanded='false' aria-controls='collapseOne')
                  | I have difficulties creating an implementation for a specific step
            #collapse4.collapse(aria-labelledby='headingFour' data-parent='#accordionExample')
              .card-body
                  br
                  p Authors should have sufficient knowledge to create implementations for phenotype definitions independently. Suppose you are stuck in the development of a particular implementation. In that case, the best way to resolve this problem will be to look at implementations of existing phenotypes listed in the Phenoflow application.
        .card
            #headingFive.card-header
              h2.mb-0
                button.btn.btn-link.btn-block.text-left(type='button' data-toggle='collapse' data-target='#collapse5' aria-expanded='false' aria-controls='collapseOne')
                  | What type of step should I use for connectors such IB2B, OMOP or FHIR / What of step should I use for local CSV reads ? 
            #collapse5.collapse(aria-labelledby='headingFive' data-parent='#accordionExample')
              .card-body
                  br
                  p For local CSV reads, the load step should be selection. However, for connectors such as IB2B, OMOP or FHIR, steps of type "external" should be used.

    br
    br
    container.centerContainer
      h4#validationMessage.validationMessage
      h4#validationMessageSuccess.successValidationMessage
    br
    div(class="container")
      div(id="steps")
        if workflow && workflow.steps && workflow.steps[0]
          each step in workflow.steps
            +createStep(step.position?step.position:"", step.name?step.name:"", step.doc?step.doc:"", step.type?step.type:"", step.inputs[0]&&step.inputs[0].doc?step.inputs[0].doc:"", step.outputs[0]&&step.outputs[0].doc?step.outputs[0].doc:"", step.outputs[0]&&step.outputs[0].extension?step.outputs[0].extension:"", step.implementations)
        else
          +createStep(1, "", "", "", "", "", "", "", "", "")
    br
    div(class="row justify-content-center")
      a(onclick="addStep(); return false;" style="margin: 10px;")
        button.btn.btn-outline-success Add new step
  br
  br
  script(type='text/javascript', src='/phenoflow/javascripts/define.js')
